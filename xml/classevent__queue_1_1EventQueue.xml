<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classevent__queue_1_1EventQueue" kind="class" language="C++" prot="public">
    <compoundname>event_queue::EventQueue</compoundname>
    <includes refid="event__queue_8hpp" local="no">event_queue.hpp</includes>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classevent__queue_1_1EventQueue_1ab89b2fd741da44f28c564c0109f0746d" prot="public" static="no">
        <type>std::function&lt; void()&gt;</type>
        <definition>using event_queue::EventQueue::Event =  std::function&lt;void()&gt;</definition>
        <argsstring></argsstring>
        <name>Event</name>
        <qualifiedname>event_queue::EventQueue::Event</qualifiedname>
        <briefdescription>
<para>Type alias for an event. </para>
        </briefdescription>
        <detaileddescription>
<para>An event is defined as a callable object that takes no arguments and returns void. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/event_queue/event_queue.hpp" line="46" column="5" bodyfile="src/event_queue/event_queue.hpp" bodystart="46" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classevent__queue_1_1EventQueue_1a6a55ae6457ab9f980ce2e39b16aa14a2" prot="private" static="no" mutable="no">
        <type>std::queue&lt; <ref refid="classevent__queue_1_1EventQueue_1ab89b2fd741da44f28c564c0109f0746d" kindref="member">Event</ref> &gt;</type>
        <definition>std::queue&lt;Event&gt; event_queue::EventQueue::events_</definition>
        <argsstring></argsstring>
        <name>events_</name>
        <qualifiedname>event_queue::EventQueue::events_</qualifiedname>
        <briefdescription>
<para>The underlying queue storing events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/event_queue/event_queue.hpp" line="73" column="16" bodyfile="src/event_queue/event_queue.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classevent__queue_1_1EventQueue_1a63092761a33dcb3bc32515d9dc2cea53" prot="private" static="no" mutable="yes">
        <type>std::mutex</type>
        <definition>std::mutex event_queue::EventQueue::mutex_</definition>
        <argsstring></argsstring>
        <name>mutex_</name>
        <qualifiedname>event_queue::EventQueue::mutex_</qualifiedname>
        <briefdescription>
<para>Mutex to protect access to the event queue. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/event_queue/event_queue.hpp" line="74" column="24" bodyfile="src/event_queue/event_queue.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classevent__queue_1_1EventQueue_1abba2e993feb8d71e3304ff7245c95a42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void event_queue::EventQueue::pushEvent</definition>
        <argsstring>(const Event &amp;event)</argsstring>
        <name>pushEvent</name>
        <qualifiedname>event_queue::EventQueue::pushEvent</qualifiedname>
        <param>
          <type>const <ref refid="classevent__queue_1_1EventQueue_1ab89b2fd741da44f28c564c0109f0746d" kindref="member">Event</ref> &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Enqueues an event. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds an event to the queue. The event will be executed when <ref refid="classevent__queue_1_1EventQueue_1afce21650f324ba5fca18af18f6d7b829" kindref="member">processEvents()</ref> is called.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>The event to enqueue. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/event_queue/event_queue.hpp" line="55" column="10" bodyfile="src/event_queue/event_queue.cpp" bodystart="18" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classevent__queue_1_1EventQueue_1afce21650f324ba5fca18af18f6d7b829" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void event_queue::EventQueue::processEvents</definition>
        <argsstring>()</argsstring>
        <name>processEvents</name>
        <qualifiedname>event_queue::EventQueue::processEvents</qualifiedname>
        <briefdescription>
<para>Processes all events in the queue. </para>
        </briefdescription>
        <detaileddescription>
<para>Executes all events in the queue in FIFO order. After processing, the queue is empty. This operation is thread-safe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/event_queue/event_queue.hpp" line="63" column="10" bodyfile="src/event_queue/event_queue.cpp" bodystart="24" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classevent__queue_1_1EventQueue_1ab74d2754ddaf90a5cd285a33bf9491b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool event_queue::EventQueue::isEmpty</definition>
        <argsstring>() const</argsstring>
        <name>isEmpty</name>
        <qualifiedname>event_queue::EventQueue::isEmpty</qualifiedname>
        <briefdescription>
<para>Checks whether the event queue is empty. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the event queue contains no events, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/event_queue/event_queue.hpp" line="70" column="10" bodyfile="src/event_queue/event_queue.cpp" bodystart="44" bodyend="48"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A thread-safe event queue. </para>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="classevent__queue_1_1EventQueue" kindref="compound">EventQueue</ref> class allows you to enqueue events (callable objects) and later process them sequentially (in a FIFO manner). It uses a mutex to ensure that operations on the queue are safe across multiple threads. </para>
    </detaileddescription>
    <location file="src/event_queue/event_queue.hpp" line="39" column="1" bodyfile="src/event_queue/event_queue.hpp" bodystart="39" bodyend="75"/>
    <listofallmembers>
      <member refid="classevent__queue_1_1EventQueue_1ab89b2fd741da44f28c564c0109f0746d" prot="public" virt="non-virtual"><scope>event_queue::EventQueue</scope><name>Event</name></member>
      <member refid="classevent__queue_1_1EventQueue_1a6a55ae6457ab9f980ce2e39b16aa14a2" prot="private" virt="non-virtual"><scope>event_queue::EventQueue</scope><name>events_</name></member>
      <member refid="classevent__queue_1_1EventQueue_1ab74d2754ddaf90a5cd285a33bf9491b4" prot="public" virt="non-virtual"><scope>event_queue::EventQueue</scope><name>isEmpty</name></member>
      <member refid="classevent__queue_1_1EventQueue_1a63092761a33dcb3bc32515d9dc2cea53" prot="private" virt="non-virtual"><scope>event_queue::EventQueue</scope><name>mutex_</name></member>
      <member refid="classevent__queue_1_1EventQueue_1afce21650f324ba5fca18af18f6d7b829" prot="public" virt="non-virtual"><scope>event_queue::EventQueue</scope><name>processEvents</name></member>
      <member refid="classevent__queue_1_1EventQueue_1abba2e993feb8d71e3304ff7245c95a42" prot="public" virt="non-virtual"><scope>event_queue::EventQueue</scope><name>pushEvent</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
