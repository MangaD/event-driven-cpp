<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="observer_2main_8cpp" kind="file" language="C++">
    <compoundname>main.cpp</compoundname>
    <includes local="no">iostream</includes>
    <includes refid="subject_8hpp" local="yes">subject.hpp</includes>
    <includes refid="observer_8hpp" local="yes">observer.hpp</includes>
    <incdepgraph>
      <node id="1">
        <label>src/observer/main.cpp</label>
        <link refid="observer_2main_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>observer.hpp</label>
        <link refid="observer_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>subject.hpp</label>
        <link refid="subject_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>algorithm</label>
      </node>
      <node id="2">
        <label>iostream</label>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="classConcreteObserver" prot="public">ConcreteObserver</innerclass>
    <sectiondef kind="func">
      <memberdef kind="function" id="observer_2main_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/observer/main.cpp" line="34" column="5" bodyfile="src/observer/main.cpp" bodystart="34" bodyend="58"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Demonstrates the Observer pattern in C++. </para>
    </briefdescription>
    <detaileddescription>
<para>This example creates a Subject, registers concrete observers, and sends notifications to them. It shows how the Subject can notify multiple observers about events, and how observers can be dynamically added and removed. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="subject_8hpp" kindref="compound">subject.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="observer_8hpp" kindref="compound">observer.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceobserver" kindref="compound">observer</ref>;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="classConcreteObserver" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classConcreteObserver" kindref="compound">ConcreteObserver</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classobserver_1_1IObserver" kindref="compound">IObserver</ref><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classConcreteObserver_1aebc85755ca3d5640fc2473da96c2b4d6" kindref="member">onNotify</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;message)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ConcreteObserver<sp/>received:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>message<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal">};</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="observer_2main_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" kindref="member">main</ref>()<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>Subject<sp/>instance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classobserver_1_1Subject" kindref="compound">Subject</ref><sp/>subject;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>two<sp/>ConcreteObserver<sp/>instances.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classConcreteObserver" kindref="compound">ConcreteObserver</ref><sp/>observer1;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classConcreteObserver" kindref="compound">ConcreteObserver</ref><sp/>observer2;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Register<sp/>observers<sp/>with<sp/>the<sp/>subject.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>subject.<ref refid="classobserver_1_1Subject_1a544ee43d21c9347650505338df5f5753" kindref="member">addObserver</ref>(&amp;observer1);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>subject.<ref refid="classobserver_1_1Subject_1a544ee43d21c9347650505338df5f5753" kindref="member">addObserver</ref>(&amp;observer2);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Notify<sp/>all<sp/>observers<sp/>with<sp/>an<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Notifying<sp/>observers<sp/>(first<sp/>time):&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>subject.<ref refid="classobserver_1_1Subject_1ac86ff543cfc456a25147ebb296bfd04a" kindref="member">notify</ref>(</highlight><highlight class="stringliteral">&quot;Event<sp/>1:<sp/>Something<sp/>happened!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>one<sp/>observer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>subject.<ref refid="classobserver_1_1Subject_1a7331c2bfa78d6f912b63406613cc7477" kindref="member">removeObserver</ref>(&amp;observer1);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Notify<sp/>the<sp/>remaining<sp/>observers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Notifying<sp/>observers<sp/>(second<sp/>time):&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>subject.<ref refid="classobserver_1_1Subject_1ac86ff543cfc456a25147ebb296bfd04a" kindref="member">notify</ref>(</highlight><highlight class="stringliteral">&quot;Event<sp/>2:<sp/>Observer<sp/>1<sp/>removed!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/observer/main.cpp"/>
  </compounddef>
</doxygen>
