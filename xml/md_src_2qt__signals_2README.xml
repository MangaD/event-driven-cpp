<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="md_src_2qt__signals_2README" kind="page">
    <compoundname>md_src_2qt__signals_2README</compoundname>
    <title>Qt Signals &amp; Slots Example</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="md_src_2qt__signals_2README_1autotoc_md182"/> This directory contains an example implementation demonstrating event-driven programming using Qt&apos;s signals and slots mechanism in C++. The example shows how to declare signals and slots in a Qt class, connect them, and emit signals to notify the corresponding slots.</para>
<sect1 id="md_src_2qt__signals_2README_1autotoc_md183">
<title>Contents</title>
<para><itemizedlist>
<listitem><para><bold><ref refid="qt__signals_8hpp" kindref="compound">qt_signals.hpp</ref></bold> <linebreak/>
 Declares the <computeroutput>QtSignalsExample</computeroutput> class, which uses the Q_OBJECT macro to enable signals and slots. It defines a signal (<computeroutput>mySignal</computeroutput>) and a corresponding slot (<computeroutput>onMySignal</computeroutput>).</para>
</listitem><listitem><para><bold><ref refid="qt__signals_8cpp" kindref="compound">qt_signals.cpp</ref></bold> <linebreak/>
 Implements the <computeroutput>QtSignalsExample</computeroutput> class, including the logic to emit the signal and handle it in the slot.</para>
</listitem><listitem><para><bold>main.cpp</bold> <linebreak/>
 Contains a simple application that creates an instance of <computeroutput>QtSignalsExample</computeroutput>, connects its signal to its slot, and emits the signal to demonstrate the event-driven behavior.</para>
</listitem><listitem><para><bold>CMakeLists.txt</bold> <linebreak/>
 Configures the build for the Qt signals &amp; slots example. On Windows, a post-build command automatically runs <computeroutput>windeployqt</computeroutput> to copy the necessary Qt DLLs to the executable’s directory.</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md_src_2qt__signals_2README_1autotoc_md184">
<title>Building the Example</title>
<sect2 id="md_src_2qt__signals_2README_1autotoc_md185">
<title>Prerequisites</title>
<para><itemizedlist>
<listitem><para><bold>Qt6:</bold> Ensure that Qt6 is installed and that the <computeroutput>Qt6_DIR</computeroutput> variable is correctly set. The default in the CMake presets is set to <computeroutput>C:/Qt/6.8.2/msvc2022_64/lib/cmake/Qt6</computeroutput>, but you may need to modify this path depending on your system configuration.</para>
</listitem><listitem><para><bold>C++ Compiler:</bold> A compiler with C++20 support (e.g., GCC, Clang, or MSVC). You may need to modify the <computeroutput>VCINSTALLDIR</computeroutput> environment variable in the CMake presets to match your MSVC installation.</para>
</listitem><listitem><para><bold>CMake:</bold> Version 3.19 or later.</para>
</listitem><listitem><para><bold>Build Tools:</bold> Ninja, Visual Studio, or your preferred generator supported by CMake.</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="md_src_2qt__signals_2README_1autotoc_md186">
<title>Build Steps</title>
<para><orderedlist>
<listitem><para><bold>Configure the Project:</bold> <linebreak/>
 From the project root, use the provided CMake presets or run a configuration command manually. For example, for Windows MSVC Debug: <programlisting filename=".bash"><codeline><highlight class="normal">cmake<sp/>--preset<sp/>windows-msvc-debug</highlight></codeline>
</programlisting></para>
</listitem><listitem><para><bold>Build the Project:</bold> <linebreak/>
 After configuration, build the project: <programlisting filename=".bash"><codeline><highlight class="normal">cmake<sp/>--build<sp/>--preset<sp/>windows-msvc-debug</highlight></codeline>
</programlisting> On Windows, the post-build step will automatically invoke <computeroutput>windeployqt</computeroutput> to deploy the required Qt DLLs.</para>
</listitem></orderedlist>
</para>
</sect2>
</sect1>
<sect1 id="md_src_2qt__signals_2README_1autotoc_md187">
<title>Running the Example</title>
<para>After building, run the executable from the build directory. For example:</para>
<para><itemizedlist>
<listitem><para><bold>On Windows:</bold> <programlisting filename=".powershell"><codeline><highlight class="normal">.\src\qt_signals\Debug\qt_signals_example.exe</highlight></codeline>
</programlisting></para>
</listitem><listitem><para><bold>On Linux/macOS:</bold> <programlisting filename=".bash"><codeline><highlight class="normal">./src/qt_signals/qt_signals_example</highlight></codeline>
</programlisting></para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md_src_2qt__signals_2README_1autotoc_md188">
<title>Overview of the Example</title>
<para>This example demonstrates:<itemizedlist>
<listitem><para><bold>Declaring Signals and Slots:</bold> <linebreak/>
 Using the <computeroutput>Q_OBJECT</computeroutput> macro in the <computeroutput>QtSignalsExample</computeroutput> class to enable Qt’s meta-object system.</para>
</listitem><listitem><para><bold>Connecting Signals to Slots:</bold> <linebreak/>
 Establishing connections so that when a signal is emitted, the corresponding slot is called.</para>
</listitem><listitem><para><bold>Emitting Signals:</bold> <linebreak/>
 Calling the <computeroutput>emitSignal()</computeroutput> method to trigger the signal and observing how the connected slot processes the signal (e.g., printing a message to the console).</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md_src_2qt__signals_2README_1autotoc_md189">
<title>Additional Resources</title>
<para>For more information on Qt&apos;s signals and slots mechanism, refer to the <ulink url="https://doc.qt.io/qt-6/signalsandslots.html">official Qt documentation</ulink>. </para>
</sect1>
    </detaileddescription>
    <location file="src/qt_signals/README.md"/>
  </compounddef>
</doxygen>
