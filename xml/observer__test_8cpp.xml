<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="observer__test_8cpp" kind="file" language="C++">
    <compoundname>observer_test.cpp</compoundname>
    <includes local="no">cassert</includes>
    <includes local="no">iostream</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes refid="observer_8hpp" local="yes">observer/observer.hpp</includes>
    <includes refid="subject_8hpp" local="yes">observer/subject.hpp</includes>
    <incdepgraph>
      <node id="6">
        <label>observer/observer.hpp</label>
        <link refid="observer_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>observer/subject.hpp</label>
        <link refid="subject_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>tests/observer_test.cpp</label>
        <link refid="observer__test_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>algorithm</label>
      </node>
      <node id="2">
        <label>cassert</label>
      </node>
      <node id="3">
        <label>iostream</label>
      </node>
      <node id="4">
        <label>string</label>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="classTestObserver" prot="public">TestObserver</innerclass>
    <sectiondef kind="func">
      <memberdef kind="function" id="observer__test_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/observer_test.cpp" line="55" column="5" bodyfile="tests/observer_test.cpp" bodystart="55" bodyend="95"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Unit tests for the Observer pattern implementation. </para>
    </briefdescription>
    <detaileddescription>
<para>This file contains tests for verifying the functionality of the Observer pattern implementation. The tests check that:<itemizedlist>
<listitem><para>Observers are notified when the subject sends an event.</para>
</listitem><listitem><para>Multiple observers receive the notification.</para>
</listitem><listitem><para>Removing an observer prevents it from receiving subsequent notifications.</para>
</listitem></itemizedlist>
</para>
<para>If any assertion fails, the test will abort, indicating an issue with the implementation. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="observer_8hpp" kindref="compound">observer/observer.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="subject_8hpp" kindref="compound">observer/subject.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceobserver" kindref="compound">observer</ref>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="classTestObserver" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classTestObserver" kindref="compound">TestObserver</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classobserver_1_1IObserver" kindref="compound">IObserver</ref><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTestObserver_1acb60d7f2fe1cbdd8d1359d36088f3bb6" kindref="member">onNotify</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;message)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classTestObserver_1a53942213f42285fe7003d9cb59ffa8dd" kindref="member">messages</ref>.push_back(message);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/><ref refid="classTestObserver_1ae2b920577fb5f940a6e683d95a1437cb" kindref="member">getMessages</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classTestObserver_1a53942213f42285fe7003d9cb59ffa8dd" kindref="member">messages</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/><ref refid="classTestObserver_1a53942213f42285fe7003d9cb59ffa8dd" kindref="member">messages</ref>;<sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal">};</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="observer__test_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" kindref="member">main</ref>()<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>Subject<sp/>instance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classobserver_1_1Subject" kindref="compound">Subject</ref><sp/>subject;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>two<sp/>TestObserver<sp/>instances.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTestObserver" kindref="compound">TestObserver</ref><sp/>observer1;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTestObserver" kindref="compound">TestObserver</ref><sp/>observer2;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Register<sp/>both<sp/>observers<sp/>with<sp/>the<sp/>subject.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>subject.<ref refid="classobserver_1_1Subject_1a544ee43d21c9347650505338df5f5753" kindref="member">addObserver</ref>(&amp;observer1);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>subject.<ref refid="classobserver_1_1Subject_1a544ee43d21c9347650505338df5f5753" kindref="member">addObserver</ref>(&amp;observer2);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>a<sp/>test<sp/>message<sp/>and<sp/>notify<sp/>all<sp/>observers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>testMessage<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Test<sp/>Event&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>subject.<ref refid="classobserver_1_1Subject_1ac86ff543cfc456a25147ebb296bfd04a" kindref="member">notify</ref>(testMessage);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>messages<sp/>from<sp/>each<sp/>observer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>msgs1<sp/>=<sp/>observer1.<ref refid="classTestObserver_1ae2b920577fb5f940a6e683d95a1437cb" kindref="member">getMessages</ref>();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>msgs2<sp/>=<sp/>observer2.<ref refid="classTestObserver_1ae2b920577fb5f940a6e683d95a1437cb" kindref="member">getMessages</ref>();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>both<sp/>observers<sp/>received<sp/>exactly<sp/>one<sp/>message<sp/>and<sp/>it<sp/>matches<sp/>testMessage.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(msgs1.size()<sp/>==<sp/>1<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Observer1<sp/>should<sp/>have<sp/>received<sp/>exactly<sp/>one<sp/>message.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(msgs2.size()<sp/>==<sp/>1<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Observer2<sp/>should<sp/>have<sp/>received<sp/>exactly<sp/>one<sp/>message.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(msgs1[0]<sp/>==<sp/>testMessage<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Observer1&apos;s<sp/>message<sp/>should<sp/>match<sp/>the<sp/>test<sp/>event.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(msgs2[0]<sp/>==<sp/>testMessage<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Observer2&apos;s<sp/>message<sp/>should<sp/>match<sp/>the<sp/>test<sp/>event.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>observer1<sp/>from<sp/>the<sp/>subject.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>subject.<ref refid="classobserver_1_1Subject_1a7331c2bfa78d6f912b63406613cc7477" kindref="member">removeObserver</ref>(&amp;observer1);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Notify<sp/>observers<sp/>with<sp/>a<sp/>new<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>newMessage<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Another<sp/>Test<sp/>Event&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>subject.<ref refid="classobserver_1_1Subject_1ac86ff543cfc456a25147ebb296bfd04a" kindref="member">notify</ref>(newMessage);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>After<sp/>removal,<sp/>observer1<sp/>should<sp/>not<sp/>receive<sp/>the<sp/>new<sp/>message,<sp/>while<sp/>observer2<sp/>should.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(observer1.<ref refid="classTestObserver_1ae2b920577fb5f940a6e683d95a1437cb" kindref="member">getMessages</ref>().size()<sp/>==<sp/>1<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Observer1<sp/>should<sp/>not<sp/>have<sp/>received<sp/>the<sp/>new<sp/>message<sp/>after<sp/>removal.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(observer2.<ref refid="classTestObserver_1ae2b920577fb5f940a6e683d95a1437cb" kindref="member">getMessages</ref>().size()<sp/>==<sp/>2<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Observer2<sp/>should<sp/>have<sp/>received<sp/>two<sp/>messages.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(observer2.<ref refid="classTestObserver_1ae2b920577fb5f940a6e683d95a1437cb" kindref="member">getMessages</ref>()[1]<sp/>==<sp/>newMessage<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Observer2&apos;s<sp/>second<sp/>message<sp/>should<sp/>match<sp/>the<sp/>new<sp/>test<sp/>event.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;All<sp/>observer<sp/>tests<sp/>passed.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="tests/observer_test.cpp"/>
  </compounddef>
</doxygen>
