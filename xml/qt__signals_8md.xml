<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="qt__signals_8md" kind="file" language="Markdown">
    <compoundname>qt_signals.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>Qt<sp/>Signals<sp/>&amp;<sp/>Slots<sp/>in<sp/>C++</highlight></codeline>
<codeline><highlight class="normal">[TOC]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>Qt<sp/>framework<sp/>provides<sp/>a<sp/>powerful<sp/>mechanism<sp/>for<sp/>event-driven<sp/>programming<sp/>through<sp/>its<sp/>signals<sp/>and<sp/>slots<sp/>system.<sp/>This<sp/>mechanism<sp/>allows<sp/>objects<sp/>to<sp/>communicate<sp/>with<sp/>each<sp/>other<sp/>in<sp/>a<sp/>loosely<sp/>coupled<sp/>manner,<sp/>which<sp/>is<sp/>ideal<sp/>for<sp/>building<sp/>responsive<sp/>and<sp/>modular<sp/>applications.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>What<sp/>Are<sp/>Signals<sp/>and<sp/>Slots?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>**Signals:**<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Signals<sp/>are<sp/>emitted<sp/>by<sp/>an<sp/>object<sp/>when<sp/>a<sp/>specific<sp/>event<sp/>occurs<sp/>or<sp/>its<sp/>state<sp/>changes.<sp/>They<sp/>serve<sp/>as<sp/>notifications<sp/>without<sp/>providing<sp/>any<sp/>implementation<sp/>details.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>**Slots:**<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Slots<sp/>are<sp/>functions<sp/>(or<sp/>methods)<sp/>that<sp/>are<sp/>called<sp/>in<sp/>response<sp/>to<sp/>a<sp/>signal.<sp/>They<sp/>are<sp/>used<sp/>to<sp/>process<sp/>the<sp/>event<sp/>or<sp/>state<sp/>change<sp/>indicated<sp/>by<sp/>the<sp/>signal.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Key<sp/>Features<sp/>of<sp/>Qt&apos;s<sp/>Signal-Slot<sp/>Mechanism</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>**Loose<sp/>Coupling:**<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Objects<sp/>can<sp/>communicate<sp/>without<sp/>needing<sp/>to<sp/>know<sp/>about<sp/>each<sp/>other&apos;s<sp/>internal<sp/>implementations.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>**Type<sp/>Safety:**<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Connections<sp/>between<sp/>signals<sp/>and<sp/>slots<sp/>are<sp/>checked<sp/>at<sp/>compile<sp/>time,<sp/>ensuring<sp/>that<sp/>the<sp/>parameters<sp/>match.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>**Automatic<sp/>Disconnection:**<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>When<sp/>an<sp/>object<sp/>is<sp/>destroyed,<sp/>its<sp/>signals<sp/>and<sp/>slots<sp/>are<sp/>automatically<sp/>disconnected,<sp/>reducing<sp/>the<sp/>risk<sp/>of<sp/>accessing<sp/>invalid<sp/>pointers.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>**Thread-Safe:**<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Qt<sp/>provides<sp/>mechanisms<sp/>to<sp/>safely<sp/>communicate<sp/>across<sp/>threads<sp/>using<sp/>signals<sp/>and<sp/>slots.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Setting<sp/>Up<sp/>a<sp/>Qt<sp/>Project</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>use<sp/>signals<sp/>and<sp/>slots:</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Your<sp/>classes<sp/>must<sp/>inherit<sp/>from<sp/>`QObject`.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>The<sp/>class<sp/>that<sp/>declares<sp/>signals<sp/>or<sp/>slots<sp/>must<sp/>include<sp/>the<sp/>`Q_OBJECT`<sp/>macro.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>The<sp/>Qt<sp/>Meta-Object<sp/>Compiler<sp/>(moc)<sp/>processes<sp/>your<sp/>headers<sp/>to<sp/>generate<sp/>meta-information<sp/>required<sp/>for<sp/>signal-slot<sp/>communication.<sp/>This<sp/>is<sp/>usually<sp/>handled<sp/>automatically<sp/>by<sp/>your<sp/>build<sp/>system<sp/>(e.g.,<sp/>qmake<sp/>or<sp/>CMake<sp/>with<sp/>Qt<sp/>integration).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Example:<sp/>A<sp/>Simple<sp/>Signal-Slot<sp/>Implementation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Below<sp/>is<sp/>a<sp/>simple<sp/>console<sp/>application<sp/>demonstrating<sp/>Qt&apos;s<sp/>signals<sp/>and<sp/>slots.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Sender<sp/>Class</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>sender.h</highlight></codeline>
<codeline><highlight class="normal">#ifndef<sp/>SENDER_H</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>SENDER_H</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;QObject&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;QString&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>Sender<sp/>:<sp/>public<sp/>QObject<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Q_OBJECT</highlight></codeline>
<codeline><highlight class="normal">public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>explicit<sp/>Sender(QObject*<sp/>parent<sp/>=<sp/>nullptr)<sp/>:<sp/>QObject(parent)<sp/>{}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">signals:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Signal<sp/>that<sp/>carries<sp/>a<sp/>message<sp/>when<sp/>emitted</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>mySignal(const<sp/>QString&amp;<sp/>message);</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#endif<sp/>//<sp/>SENDER_H</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Receiver<sp/>Class</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>receiver.h</highlight></codeline>
<codeline><highlight class="normal">#ifndef<sp/>RECEIVER_H</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>RECEIVER_H</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;QObject&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;iostream&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>Receiver<sp/>:<sp/>public<sp/>QObject<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Q_OBJECT</highlight></codeline>
<codeline><highlight class="normal">public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>explicit<sp/>Receiver(QObject*<sp/>parent<sp/>=<sp/>nullptr)<sp/>:<sp/>QObject(parent)<sp/>{}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">public<sp/>slots:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Slot<sp/>to<sp/>handle<sp/>the<sp/>signal<sp/>and<sp/>print<sp/>the<sp/>message</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>onMySignal(const<sp/>QString&amp;<sp/>message)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Receiver<sp/>received:<sp/>&quot;<sp/>&lt;&lt;<sp/>message.toStdString()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#endif<sp/>//<sp/>RECEIVER_H</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Main<sp/>File</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>main.cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;QCoreApplication&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;sender.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;receiver.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int<sp/>main(int<sp/>argc,<sp/>char<sp/>*argv[])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>QCoreApplication<sp/>app(argc,<sp/>argv);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Sender<sp/>sender;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Receiver<sp/>receiver;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Connect<sp/>the<sp/>signal<sp/>to<sp/>the<sp/>slot</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>QObject::connect(&amp;sender,<sp/>&amp;Sender::mySignal,<sp/>&amp;receiver,<sp/>&amp;Receiver::onMySignal);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Emit<sp/>the<sp/>signal<sp/>with<sp/>a<sp/>message</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>sender.mySignal(&quot;Hello<sp/>from<sp/>Qt<sp/>Signals<sp/>&amp;<sp/>Slots!&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>app.exec();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Explanation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>**Q_OBJECT<sp/>Macro:**<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Classes<sp/>that<sp/>use<sp/>signals<sp/>and<sp/>slots<sp/>must<sp/>include<sp/>the<sp/>`Q_OBJECT`<sp/>macro<sp/>in<sp/>their<sp/>declaration.<sp/>This<sp/>enables<sp/>Qt&apos;s<sp/>meta-object<sp/>features,<sp/>including<sp/>runtime<sp/>type<sp/>information<sp/>and<sp/>dynamic<sp/>signal-slot<sp/>connections.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>**Inheritance<sp/>from<sp/>QObject:**<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Both<sp/>`Sender`<sp/>and<sp/>`Receiver`<sp/>inherit<sp/>from<sp/>`QObject`,<sp/>which<sp/>is<sp/>essential<sp/>for<sp/>the<sp/>signal-slot<sp/>mechanism.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>**Connecting<sp/>Signals<sp/>and<sp/>Slots:**<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>The<sp/>`QObject::connect`<sp/>function<sp/>is<sp/>used<sp/>to<sp/>connect<sp/>a<sp/>signal<sp/>from<sp/>the<sp/>`Sender`<sp/>object<sp/>to<sp/>a<sp/>slot<sp/>in<sp/>the<sp/>`Receiver`<sp/>object.<sp/>When<sp/>`sender.mySignal`<sp/>is<sp/>emitted,<sp/>the<sp/>`receiver.onMySignal`<sp/>slot<sp/>is<sp/>automatically<sp/>called.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>**Event<sp/>Loop:**<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>The<sp/>call<sp/>to<sp/>`app.exec()`<sp/>starts<sp/>the<sp/>Qt<sp/>event<sp/>loop,<sp/>which<sp/>is<sp/>required<sp/>to<sp/>process<sp/>and<sp/>deliver<sp/>signals<sp/>and<sp/>other<sp/>events.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Conclusion</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Qt&apos;s<sp/>signals<sp/>and<sp/>slots<sp/>offer<sp/>a<sp/>robust,<sp/>flexible,<sp/>and<sp/>type-safe<sp/>method<sp/>for<sp/>building<sp/>event-driven<sp/>applications.<sp/>By<sp/>using<sp/>this<sp/>mechanism,<sp/>you<sp/>can<sp/>design<sp/>applications<sp/>that<sp/>are<sp/>modular,<sp/>maintainable,<sp/>and<sp/>easy<sp/>to<sp/>extend.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">For<sp/>more<sp/>in-depth<sp/>information,<sp/>refer<sp/>to<sp/>the<sp/>[Qt<sp/>Documentation<sp/>on<sp/>Signals<sp/>and<sp/>Slots](https://doc.qt.io/qt-5/signalsandslots.html).</highlight></codeline>
    </programlisting>
    <location file="build/md_files/docs/qt_signals.md"/>
  </compounddef>
</doxygen>
