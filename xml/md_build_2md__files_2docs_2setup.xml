<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="md_build_2md__files_2docs_2setup" kind="page">
    <compoundname>md_build_2md__files_2docs_2setup</compoundname>
    <title>Setup Guide for Event-Driven Programming in C++</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="md_build_2md__files_2docs_2setup_1autotoc_md118"/></para>
<para>This guide explains how to set up, build, and run the Event-Driven Programming in C++ project across multiple platforms using CMake and CMake Presets. The project includes examples of various event-driven techniques, including a Qt signals &amp; slots example. On Windows, a post-build command automatically runs <computeroutput>windeployqt</computeroutput> to deploy the necessary Qt DLLs, so you don&apos;t have to run it manually.</para>
<para><hruler/>
</para>
<sect1 id="md_build_2md__files_2docs_2setup_1autotoc_md120">
<title>Prerequisites</title>
<para>Before you begin, ensure you have the following installed:</para>
<para><itemizedlist>
<listitem><para><bold>C++ Compiler:</bold> A compiler supporting C++20 (e.g., GCC, Clang, or MSVC).</para>
</listitem><listitem><para><bold>CMake:</bold> Version 3.19 or later (to support CMake Presets).</para>
</listitem><listitem><para><bold>Git:</bold> For cloning the repository.</para>
</listitem><listitem><para><bold>Qt6:</bold> Installed on your system.<itemizedlist>
<listitem><para><bold>Windows:</bold> e.g., <computeroutput>C:\Qt\6.8.2\msvc2022_64\</computeroutput></para>
</listitem><listitem><para><bold>Linux/macOS:</bold> Ensure Qt6 is installed and accessible.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>Build Tool:</bold> Ninja, Visual Studio, or another generator supported by CMake.</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
</sect1>
<sect1 id="md_build_2md__files_2docs_2setup_1autotoc_md122">
<title>Cloning the Repository</title>
<para>Clone the repository from GitHub and navigate into the project directory:</para>
<para><programlisting filename=".bash"><codeline><highlight class="normal">git<sp/>clone<sp/>https://github.com/MangaD/event-driven-cpp.git</highlight></codeline>
<codeline><highlight class="normal">cd<sp/>event-driven-cpp</highlight></codeline>
</programlisting></para>
<para><hruler/>
</para>
</sect1>
<sect1 id="md_build_2md__files_2docs_2setup_1autotoc_md124">
<title>Using CMake Presets</title>
<para>The project includes a <computeroutput>CMakePresets.json</computeroutput> file in the root directory that defines several configuration presets for cross-platform builds and multiple build types.</para>
<sect2 id="md_build_2md__files_2docs_2setup_1autotoc_md125">
<title>To Configure the Project</title>
<para>For a default cross-platform configuration, run:</para>
<para><programlisting filename=".bash"><codeline><highlight class="normal">cmake<sp/>--preset<sp/>default</highlight></codeline>
</programlisting></para>
<para>For Windows MSVC in Debug mode, for example:</para>
<para><programlisting filename=".bash"><codeline><highlight class="normal">cmake<sp/>--preset<sp/>windows-msvc-debug</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="md_build_2md__files_2docs_2setup_1autotoc_md126">
<title>To Build the Project</title>
<para>After configuration, build using:</para>
<para><programlisting filename=".bash"><codeline><highlight class="normal">cmake<sp/>--build<sp/>--preset<sp/>default</highlight></codeline>
</programlisting></para>
<para>Or, for a specific preset (e.g., Windows MSVC Debug):</para>
<para><programlisting filename=".bash"><codeline><highlight class="normal">cmake<sp/>--build<sp/>--preset<sp/>windows-msvc-debug</highlight></codeline>
</programlisting></para>
<para><hruler/>
</para>
</sect2>
</sect1>
<sect1 id="md_build_2md__files_2docs_2setup_1autotoc_md128">
<title>Automatic Deployment on Windows</title>
<para>For the Qt signals &amp; slots example, the CMakeLists.txt file in <computeroutput>src/qt_signals</computeroutput> includes a post-build custom command that runs <computeroutput>windeployqt</computeroutput> automatically. This step copies all required Qt6 DLLs into your build directory alongside the executable. You no longer need to manually run <computeroutput>windeployqt</computeroutput>.</para>
<sect2 id="md_build_2md__files_2docs_2setup_1autotoc_md129">
<title>Note on Qt6_DIR and VCINSTALLDIR</title>
<para>The <computeroutput>Qt6_DIR</computeroutput> variable in the CMake presets (or your environment) must point to the directory containing the Qt6 CMake configuration files (typically something like <computeroutput>C:/Qt/&lt;version&gt;/&lt;compiler&gt;/lib/cmake/Qt6</computeroutput> on Windows). If your Qt installation is located elsewhere, please update this variable accordingly in the <computeroutput>CMakePresets.json</computeroutput> file or your environment. The <computeroutput>VCINSTALLDIR</computeroutput> environment variable should also be set to the Visual Studio installation directory.</para>
<para><hruler/>
</para>
</sect2>
</sect1>
<sect1 id="md_build_2md__files_2docs_2setup_1autotoc_md131">
<title>Running the Application</title>
<para>After building, run the executable from the build output directory:</para>
<para><itemizedlist>
<listitem><para><bold>On Windows:</bold></para>
<para>The post-build command will have deployed the Qt DLLs automatically. For example:</para>
<para><programlisting filename=".powershell"><codeline><highlight class="normal">.\src\qt_signals\Debug\qt_signals_example.exe</highlight></codeline>
</programlisting></para>
</listitem><listitem><para><bold>On Linux/macOS:</bold></para>
<para>Run the executable from the build directory:</para>
<para><programlisting filename=".bash"><codeline><highlight class="normal">./src/qt_signals/qt_signals_example</highlight></codeline>
</programlisting></para>
</listitem></itemizedlist>
</para>
<para>If you run into issues with missing DLLs on Windows, verify that the post-build command has executed successfully and that your <computeroutput>Qt6_DIR</computeroutput> and <computeroutput>VCINSTALLDIR</computeroutput> are correctly configured.</para>
<para><hruler/>
</para>
</sect1>
<sect1 id="md_build_2md__files_2docs_2setup_1autotoc_md133">
<title>Summary</title>
<para><orderedlist>
<listitem><para><bold>Clone the Repository:</bold> <linebreak/>
 Use Git to clone the project and change into its directory.</para>
</listitem><listitem><para><bold>Configure and Build:</bold> <linebreak/>
 Use the provided <computeroutput>CMakePresets.json</computeroutput> with the <computeroutput>cmake --preset</computeroutput> and <computeroutput>cmake --build</computeroutput> commands to configure and build the project.</para>
</listitem><listitem><para><bold>Automatic Deployment (Windows):</bold> <linebreak/>
 The post-build custom command runs <computeroutput>windeployqt</computeroutput> to deploy the necessary Qt DLLs automatically.</para>
</listitem><listitem><para><bold>Run the Executable:</bold> <linebreak/>
 Launch the desired example from your build output directory.</para>
</listitem></orderedlist>
</para>
<para>Following these steps should provide a streamlined, cross-platform workflow for building and running the Event-Driven Programming in C++ project without manually hardcoding paths or running deployment commands. </para>
</sect1>
    </detaileddescription>
    <location file="build/md_files/docs/setup.md"/>
  </compounddef>
</doxygen>
