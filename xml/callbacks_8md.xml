<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="callbacks_8md" kind="file" language="Markdown">
    <compoundname>callbacks.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>Callbacks<sp/>in<sp/>C++</highlight></codeline>
<codeline><highlight class="normal">[TOC]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Callbacks<sp/>are<sp/>a<sp/>fundamental<sp/>mechanism<sp/>for<sp/>implementing<sp/>event-driven<sp/>programming<sp/>in<sp/>C++.<sp/>They<sp/>allow<sp/>you<sp/>to<sp/>specify<sp/>a<sp/>function<sp/>(or<sp/>callable<sp/>object)<sp/>that<sp/>will<sp/>be<sp/>invoked<sp/>when<sp/>a<sp/>particular<sp/>event<sp/>occurs.<sp/>In<sp/>this<sp/>document,<sp/>we&apos;ll<sp/>explore<sp/>different<sp/>approaches<sp/>to<sp/>callbacks<sp/>in<sp/>C++,<sp/>including<sp/>function<sp/>pointers,<sp/>lambdas,<sp/>and<sp/>`std::function`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>What<sp/>Are<sp/>Callbacks?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A<sp/>callback<sp/>is<sp/>essentially<sp/>a<sp/>function<sp/>that<sp/>is<sp/>passed<sp/>as<sp/>an<sp/>argument<sp/>to<sp/>another<sp/>function.<sp/>The<sp/>receiving<sp/>function<sp/>stores<sp/>the<sp/>callback<sp/>and<sp/>calls<sp/>it<sp/>at<sp/>the<sp/>appropriate<sp/>timeâ€”typically<sp/>when<sp/>an<sp/>event<sp/>occurs.<sp/>This<sp/>decouples<sp/>the<sp/>event<sp/>producer<sp/>from<sp/>the<sp/>event<sp/>consumer,<sp/>allowing<sp/>for<sp/>flexible<sp/>and<sp/>reusable<sp/>code.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Approaches<sp/>to<sp/>Implementing<sp/>Callbacks</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>1.<sp/>Function<sp/>Pointers</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Function<sp/>pointers<sp/>are<sp/>the<sp/>traditional<sp/>C-style<sp/>way<sp/>to<sp/>implement<sp/>callbacks.<sp/>They<sp/>require<sp/>specifying<sp/>the<sp/>exact<sp/>function<sp/>signature<sp/>and<sp/>do<sp/>not<sp/>offer<sp/>much<sp/>flexibility<sp/>in<sp/>terms<sp/>of<sp/>state<sp/>or<sp/>capturing<sp/>context.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Example:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;iostream&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>A<sp/>simple<sp/>callback<sp/>function</highlight></codeline>
<codeline><highlight class="normal">void<sp/>onEvent()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Event<sp/>triggered<sp/>using<sp/>function<sp/>pointer!&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>Event<sp/>{</highlight></codeline>
<codeline><highlight class="normal">public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Using<sp/>a<sp/>function<sp/>pointer<sp/>for<sp/>the<sp/>callback</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*callback)()<sp/>=<sp/>nullptr;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>trigger()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(callback)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>callback();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int<sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Event<sp/>event;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>event.callback<sp/>=<sp/>onEvent;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>event.trigger();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>2.<sp/>Lambdas</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Lambdas<sp/>provide<sp/>a<sp/>modern<sp/>and<sp/>flexible<sp/>way<sp/>to<sp/>define<sp/>callbacks.<sp/>They<sp/>can<sp/>capture<sp/>local<sp/>variables,<sp/>which<sp/>allows<sp/>the<sp/>callback<sp/>to<sp/>maintain<sp/>context<sp/>without<sp/>global<sp/>variables.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Example:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;iostream&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;functional&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>Event<sp/>{</highlight></codeline>
<codeline><highlight class="normal">public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Using<sp/>std::function<sp/>to<sp/>store<sp/>a<sp/>lambda<sp/>or<sp/>any<sp/>callable</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;void()&gt;<sp/>callback;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>trigger()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(callback)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>callback();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int<sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Event<sp/>event;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>A<sp/>lambda<sp/>callback<sp/>that<sp/>captures<sp/>local<sp/>context</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>value<sp/>=<sp/>42;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>event.callback<sp/>=<sp/>[value]()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Event<sp/>triggered<sp/>with<sp/>lambda!<sp/>Captured<sp/>value:<sp/>&quot;<sp/>&lt;&lt;<sp/>value<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>event.trigger();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>3.<sp/>`std::function`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>`std::function`<sp/>template<sp/>is<sp/>a<sp/>versatile<sp/>tool<sp/>that<sp/>can<sp/>store<sp/>any<sp/>callable<sp/>object<sp/>(function<sp/>pointers,<sp/>lambdas,<sp/>or<sp/>objects<sp/>with<sp/>an<sp/>overloaded<sp/>`operator()`).<sp/>This<sp/>provides<sp/>maximum<sp/>flexibility,<sp/>allowing<sp/>you<sp/>to<sp/>change<sp/>the<sp/>callback<sp/>type<sp/>without<sp/>modifying<sp/>the<sp/>interface.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Example:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;iostream&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;functional&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>Event<sp/>{</highlight></codeline>
<codeline><highlight class="normal">public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>std::function<sp/>can<sp/>hold<sp/>any<sp/>callable<sp/>matching<sp/>the<sp/>signature<sp/>void()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;void()&gt;<sp/>callback;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>trigger()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(callback)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>callback();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>externalCallback()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Event<sp/>triggered<sp/>using<sp/>std::function<sp/>with<sp/>external<sp/>function!&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int<sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Event<sp/>event;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Setting<sp/>an<sp/>external<sp/>function<sp/>as<sp/>a<sp/>callback</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>event.callback<sp/>=<sp/>externalCallback;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>event.trigger();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Reassigning<sp/>a<sp/>lambda<sp/>as<sp/>the<sp/>callback</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>event.callback<sp/>=<sp/>[]()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Event<sp/>triggered<sp/>using<sp/>std::function<sp/>with<sp/>lambda!&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>event.trigger();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Benefits<sp/>of<sp/>Using<sp/>Callbacks</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>**Decoupling:**<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Callbacks<sp/>help<sp/>separate<sp/>the<sp/>logic<sp/>that<sp/>triggers<sp/>events<sp/>from<sp/>the<sp/>logic<sp/>that<sp/>handles<sp/>them.<sp/>This<sp/>leads<sp/>to<sp/>a<sp/>more<sp/>modular<sp/>design.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>**Flexibility:**<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>The<sp/>use<sp/>of<sp/>lambdas<sp/>and<sp/>`std::function`<sp/>allows<sp/>callbacks<sp/>to<sp/>carry<sp/>context,<sp/>making<sp/>them<sp/>highly<sp/>adaptable<sp/>to<sp/>different<sp/>scenarios.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>**Reusability:**<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Once<sp/>defined,<sp/>callbacks<sp/>can<sp/>be<sp/>reused<sp/>across<sp/>various<sp/>parts<sp/>of<sp/>your<sp/>application<sp/>without<sp/>rewriting<sp/>the<sp/>event-handling<sp/>logic.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>When<sp/>to<sp/>Use<sp/>Callbacks</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Callbacks<sp/>are<sp/>particularly<sp/>useful<sp/>in<sp/>scenarios<sp/>where:</highlight></codeline>
<codeline><highlight class="normal">-<sp/>You<sp/>need<sp/>asynchronous<sp/>event<sp/>handling.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>The<sp/>producer<sp/>of<sp/>an<sp/>event<sp/>should<sp/>not<sp/>be<sp/>tightly<sp/>coupled<sp/>to<sp/>its<sp/>consumer.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>You<sp/>want<sp/>to<sp/>provide<sp/>hooks<sp/>for<sp/>custom<sp/>behavior<sp/>that<sp/>can<sp/>be<sp/>defined<sp/>by<sp/>the<sp/>client<sp/>code.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Conclusion</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Callbacks<sp/>are<sp/>an<sp/>essential<sp/>tool<sp/>in<sp/>event-driven<sp/>programming,<sp/>enabling<sp/>you<sp/>to<sp/>design<sp/>systems<sp/>that<sp/>are<sp/>both<sp/>flexible<sp/>and<sp/>modular.<sp/>Whether<sp/>you<sp/>choose<sp/>function<sp/>pointers<sp/>for<sp/>simple<sp/>cases<sp/>or<sp/>leverage<sp/>`std::function`<sp/>and<sp/>lambdas<sp/>for<sp/>more<sp/>complex<sp/>scenarios,<sp/>callbacks<sp/>allow<sp/>you<sp/>to<sp/>write<sp/>cleaner,<sp/>more<sp/>decoupled<sp/>code.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Feel<sp/>free<sp/>to<sp/>experiment<sp/>with<sp/>these<sp/>examples<sp/>and<sp/>adapt<sp/>them<sp/>to<sp/>your<sp/>specific<sp/>needs.<sp/>For<sp/>more<sp/>advanced<sp/>topics,<sp/>consider<sp/>exploring<sp/>how<sp/>callbacks<sp/>interact<sp/>with<sp/>multi-threading<sp/>or<sp/>how<sp/>to<sp/>handle<sp/>errors<sp/>within<sp/>callback<sp/>functions.</highlight></codeline>
    </programlisting>
    <location file="build/md_files/docs/callbacks.md"/>
  </compounddef>
</doxygen>
