<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classcommon_1_1Logger" kind="class" language="C++" prot="public">
    <compoundname>common::Logger</compoundname>
    <includes refid="logger_8hpp" local="no">logger.hpp</includes>
    <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classcommon_1_1Logger_1aa40d1036c84bd67ddf0d860e9fae0e70" prot="private" static="yes" mutable="no">
        <type><ref refid="namespacecommon_1aa3dd8c5983888f4c0199cf0bb2a73b2a" kindref="member">LogLevel</ref></type>
        <definition>LogLevel common::Logger::currentLevel</definition>
        <argsstring></argsstring>
        <name>currentLevel</name>
        <qualifiedname>common::Logger::currentLevel</qualifiedname>
        <initializer>= <ref refid="namespacecommon_1aa3dd8c5983888f4c0199cf0bb2a73b2aa4059b0251f66a18cb56f544728796875" kindref="member">LogLevel::Info</ref></initializer>
        <briefdescription>
<para>The current logging level. </para>
        </briefdescription>
        <detaileddescription>
<para>Only messages with a log level equal to or higher than this value will be logged. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/common/logger.hpp" line="101" column="21" bodyfile="src/common/logger.hpp" bodystart="101" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classcommon_1_1Logger_1a56f19fa952edee3073774d6d423c715c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void common::Logger::setLogLevel</definition>
        <argsstring>(LogLevel level)</argsstring>
        <name>setLogLevel</name>
        <qualifiedname>common::Logger::setLogLevel</qualifiedname>
        <param>
          <type><ref refid="namespacecommon_1aa3dd8c5983888f4c0199cf0bb2a73b2a" kindref="member">LogLevel</ref></type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Sets the current log level. </para>
        </briefdescription>
        <detaileddescription>
<para>Only messages with a log level equal to or higher than the current log level will be output.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The new log level to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/common/logger.hpp" line="57" column="17" bodyfile="src/common/logger.cpp" bodystart="16" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="classcommon_1_1Logger_1a2af61f1a28f8242267a5d7dd7b38a16f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void common::Logger::debug</definition>
        <argsstring>(const std::string &amp;message)</argsstring>
        <name>debug</name>
        <qualifiedname>common::Logger::debug</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Logs a debug message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The debug message to log. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/common/logger.hpp" line="64" column="17" bodyfile="src/common/logger.cpp" bodystart="30" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classcommon_1_1Logger_1a1512b5091e25ee377f0f7bc92fa79e2c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void common::Logger::info</definition>
        <argsstring>(const std::string &amp;message)</argsstring>
        <name>info</name>
        <qualifiedname>common::Logger::info</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Logs an informational message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The informational message to log. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/common/logger.hpp" line="71" column="17" bodyfile="src/common/logger.cpp" bodystart="36" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classcommon_1_1Logger_1ad63cb13f8ae295d2763dac7e2b8144c1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void common::Logger::warning</definition>
        <argsstring>(const std::string &amp;message)</argsstring>
        <name>warning</name>
        <qualifiedname>common::Logger::warning</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Logs a warning message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The warning message to log. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/common/logger.hpp" line="78" column="17" bodyfile="src/common/logger.cpp" bodystart="42" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classcommon_1_1Logger_1aec9c7a7111c70e5f9b4e13aa71cc805f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void common::Logger::error</definition>
        <argsstring>(const std::string &amp;message)</argsstring>
        <name>error</name>
        <qualifiedname>common::Logger::error</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Logs an error message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The error message to log. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/common/logger.hpp" line="85" column="17" bodyfile="src/common/logger.cpp" bodystart="48" bodyend="52"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classcommon_1_1Logger_1a46ecbb7628cb0be0e0438da4d4f5d57d" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string common::Logger::logLevelToString</definition>
        <argsstring>(LogLevel level)</argsstring>
        <name>logLevelToString</name>
        <qualifiedname>common::Logger::logLevelToString</qualifiedname>
        <param>
          <type><ref refid="namespacecommon_1aa3dd8c5983888f4c0199cf0bb2a73b2a" kindref="member">LogLevel</ref></type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Converts a LogLevel to its string representation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The log level to convert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string representing the log level. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/common/logger.hpp" line="94" column="24" bodyfile="src/common/logger.cpp" bodystart="20" bodyend="28"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A simple logging utility. </para>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="classcommon_1_1Logger" kindref="compound">Logger</ref> class provides static methods for logging messages at different log levels. The current log level determines which messages are actually output. </para>
    </detaileddescription>
    <location file="src/common/logger.hpp" line="47" column="1" bodyfile="src/common/logger.hpp" bodystart="47" bodyend="102"/>
    <listofallmembers>
      <member refid="classcommon_1_1Logger_1aa40d1036c84bd67ddf0d860e9fae0e70" prot="private" virt="non-virtual"><scope>common::Logger</scope><name>currentLevel</name></member>
      <member refid="classcommon_1_1Logger_1a2af61f1a28f8242267a5d7dd7b38a16f" prot="public" virt="non-virtual"><scope>common::Logger</scope><name>debug</name></member>
      <member refid="classcommon_1_1Logger_1aec9c7a7111c70e5f9b4e13aa71cc805f" prot="public" virt="non-virtual"><scope>common::Logger</scope><name>error</name></member>
      <member refid="classcommon_1_1Logger_1a1512b5091e25ee377f0f7bc92fa79e2c" prot="public" virt="non-virtual"><scope>common::Logger</scope><name>info</name></member>
      <member refid="classcommon_1_1Logger_1a46ecbb7628cb0be0e0438da4d4f5d57d" prot="private" virt="non-virtual"><scope>common::Logger</scope><name>logLevelToString</name></member>
      <member refid="classcommon_1_1Logger_1a56f19fa952edee3073774d6d423c715c" prot="public" virt="non-virtual"><scope>common::Logger</scope><name>setLogLevel</name></member>
      <member refid="classcommon_1_1Logger_1ad63cb13f8ae295d2763dac7e2b8144c1" prot="public" virt="non-virtual"><scope>common::Logger</scope><name>warning</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
