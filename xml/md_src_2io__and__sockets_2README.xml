<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="md_src_2io__and__sockets_2README" kind="page">
    <compoundname>md_src_2io__and__sockets_2README</compoundname>
    <title>I/O and Sockets Demonstration</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="md_src_2io__and__sockets_2README_1autotoc_md165"/> This directory contains a cross-platform demonstration that monitors both socket events and console input. The demonstration sets up a simple TCP server socket (listening on port 12345) and continuously monitors for:</para>
<para><itemizedlist>
<listitem><para><bold>Incoming connections on the server socket</bold>, and</para>
</listitem><listitem><para><bold>Console input</bold> (e.g., user commands such as &quot;quit&quot; to stop the server).</para>
</listitem></itemizedlist>
</para>
<para>The implementation uses different techniques depending on the platform:</para>
<para><itemizedlist>
<listitem><para><bold>Windows:</bold> <linebreak/>
 Uses Winsockâ€™s <computeroutput>select()</computeroutput> function to monitor the server socket and <computeroutput>_kbhit()</computeroutput> to poll for console input.</para>
</listitem><listitem><para><bold>POSIX (Linux/macOS):</bold> <linebreak/>
 Uses the <computeroutput>select()</computeroutput> system call to monitor both the server socket and standard input (STDIN_FILENO).</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
<sect1 id="md_src_2io__and__sockets_2README_1autotoc_md167">
<title>Contents</title>
<para><itemizedlist>
<listitem><para><bold><ref refid="io__and__sockets_8cpp" kindref="compound">io_and_sockets.cpp</ref></bold> <linebreak/>
 Implements the demonstration. This file sets up the TCP server socket, enters a loop to monitor socket and console events, and handles incoming connections and user input.</para>
</listitem><listitem><para><bold>CMakeLists.txt</bold> <linebreak/>
 Contains the CMake build configuration for this demonstration. It supports cross-platform builds and links against necessary libraries (e.g., <computeroutput>ws2_32</computeroutput> on Windows for Winsock).</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
</sect1>
<sect1 id="md_src_2io__and__sockets_2README_1autotoc_md169">
<title>Building the Demonstration</title>
<para>This demonstration is built using CMake. You can use the provided CMake presets for cross-platform configurations or run the commands manually.</para>
<sect2 id="md_src_2io__and__sockets_2README_1autotoc_md170">
<title>Using CMake Presets</title>
<para>For example, to build on Windows using MSVC in Debug mode: <programlisting filename=".bash"><codeline><highlight class="normal">cmake<sp/>--preset<sp/>windows-msvc-debug</highlight></codeline>
<codeline><highlight class="normal">cmake<sp/>--build<sp/>--preset<sp/>windows-msvc-debug</highlight></codeline>
</programlisting></para>
<para>For Linux with GCC in Debug mode: <programlisting filename=".bash"><codeline><highlight class="normal">cmake<sp/>--preset<sp/>linux-gcc-debug</highlight></codeline>
<codeline><highlight class="normal">cmake<sp/>--build<sp/>--preset<sp/>linux-gcc-debug</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="md_src_2io__and__sockets_2README_1autotoc_md171">
<title>Manual Build Steps</title>
<para><orderedlist>
<listitem><para><bold>Create a Build Directory and Configure:</bold> <programlisting filename=".bash"><codeline><highlight class="normal">mkdir<sp/>build</highlight></codeline>
<codeline><highlight class="normal">cd<sp/>build</highlight></codeline>
<codeline><highlight class="normal">cmake<sp/>..</highlight></codeline>
</programlisting></para>
</listitem><listitem><para><bold>Build the Project:</bold> <programlisting filename=".bash"><codeline><highlight class="normal">cmake<sp/>--build<sp/>.</highlight></codeline>
</programlisting></para>
</listitem></orderedlist>
</para>
<para><hruler/>
</para>
</sect2>
</sect1>
<sect1 id="md_src_2io__and__sockets_2README_1autotoc_md173">
<title>Running the Demonstration</title>
<para>After building, run the executable from the build output directory:</para>
<para><itemizedlist>
<listitem><para><bold>On Windows:</bold> <programlisting filename=".powershell"><codeline><highlight class="normal">.\src\io_and_sockets\Debug\io_and_sockets_example.exe</highlight></codeline>
</programlisting></para>
</listitem><listitem><para><bold>On Linux/macOS:</bold> <programlisting filename=".bash"><codeline><highlight class="normal">./src/io_and_sockets/io_and_sockets_example</highlight></codeline>
</programlisting></para>
</listitem></itemizedlist>
</para>
<para>When the demonstration runs, you will see console messages indicating:<itemizedlist>
<listitem><para>That the server is listening on port 12345.</para>
</listitem><listitem><para>When a connection is accepted on the server socket.</para>
</listitem><listitem><para>Any console input entered by the user.</para>
</listitem></itemizedlist>
</para>
<para>Type <computeroutput>&quot;quit&quot;</computeroutput> (without quotes) in the console and press Enter to gracefully shut down the server and exit the demonstration.</para>
<para><hruler/>
</para>
</sect1>
<sect1 id="md_src_2io__and__sockets_2README_1autotoc_md175">
<title>Additional Information</title>
<para>This demonstration illustrates:<itemizedlist>
<listitem><para><bold>Cross-Platform Socket Programming:</bold> <linebreak/>
 How to create and manage a TCP server socket using Winsock on Windows and POSIX sockets on Linux/macOS.</para>
</listitem><listitem><para><bold>Event Monitoring:</bold> <linebreak/>
 How to monitor multiple event sources (sockets and console input) using platform-specific techniques such as <computeroutput>select()</computeroutput> and <computeroutput>_kbhit()</computeroutput>.</para>
</listitem><listitem><para><bold>Conditional Compilation:</bold> <linebreak/>
 How to use preprocessor directives to write code that works on multiple platforms.</para>
</listitem></itemizedlist>
</para>
<para>Feel free to modify and extend this example. You might experiment with handling multiple concurrent client connections or integrating additional I/O event sources. </para>
</sect1>
    </detaileddescription>
    <location file="src/io_and_sockets/README.md"/>
  </compounddef>
</doxygen>
